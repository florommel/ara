//die jeweiligen Klasseninstanzen müssen sich als shared pointer instanzieren lassen.
auto instance = std::make_shared<OS::<class>>(Graph *graph, std::string name);


class OS::Graph::public {
	void set_vertex(std::shared_ptr<vertex>);
	
}

class OS::Counter:public graph::Vertex{
	Counter(graph::Graph *graph,std::string name):graph::Vertex(graph,name);
	void set_max_allowedvalue(unsigned long max_allowedvalue);
	void set_ticksperbase(unsigned long max_allowedvalue);
	void set_min_cycle(unsigned long max_allowedvalue); 
}

class OS::Resources:public graph::Vertex{
	Resource(graph::Graph *graph,std::string name):graph::Vertex(graph,name);
	void set_resource_property(std::string property, std::string linked_resource); //string argument property unschön, hier wäre später ein enum "resource_type" vorgesehen"
}

class OS::Event:public graph::Vertex{
	Event(graph::Graph *graph,std::string name):graph::Vertex(graph,name);
	void set_event_mask(unsigned long long mask);
	void set_event_mask_auto();
}

class OS::Alarm:public graph::Vertex{
	Alarm(graph::Graph *graph,std::string name) : graph::Vertex(graph,name);

	bool set_counter_reference(std::string counter);
	bool set_task_reference(std::string task);
	bool set_event_reference(std::string event);
	bool set_alarm_callback_reference(std::string callback_name);

	void set_autostart(bool flag);
	void set_alarm_time(unsigned int alarm_time);
	void set_cycle_time(unsigned int cycle_time);
	void set_appmode(std::string appmode);
}

class OS::ISR:public graph::Vertex{
	void set_category(int category);
	bool set_message_reference(std::string);
	bool set_resource_reference(std::string);
}

class OS::Task:public graph::Vertex{
	void set_priority(unsigned long priority);
	void set_scheduler(std::string scheduler);
	void set_activation(unsigned long activation);
	void set_autostart(bool autostart);
	void set_appmode(std::string app_mode);
	bool set_resource_reference(std::string resource);
	bool set_event_reference(std::string event);
	bool set_message_reference(std::string message);
}

