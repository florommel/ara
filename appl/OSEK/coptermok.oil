{

	"OIL_VERSION" : ["2.5","test"], 	

	
	"IMPLEMENTATION" :  {
			
		"trampoline" : {
			"TASK" : {
				"STACKSIZE" :  500,
				"PRIORITY" : 1
			},
			"ISR" : {
				"STACKSIZE" : 500
			}
		}
	},
	
	"CPU" :{
		"test": { 
			"OS": {
				"config" : {
					"STATUS" : "EXTENDED",
					"ERRORHOOK" : "FALSE",
					"PRETASKHOOK" : "FALSE",
					"POSTTASKHOOK" : "FALSE",
					"STARTUPHOOK" : "FALSE",
					"SHUTDOWNHOOK" : "FALSE",
					"SYSTEM_CALL" : "TRUE",
					"APP_SRC" : "TP.c",
					"APP_NAME" : "TP_exe",
					"TRAMPOLINE_BASE_PATH" : "/Users/puaut/Home/Sources/trampoline",
					"CFLAGS" : "-g -c -ffreestanding -fsigned-char -mcpu=arm7tdmi -Os -Winline -Wall -Werror-implicit-function-declaration --param max-inline-insns-single=1000 -ffunction-sections -fdata-sections -std=gnu99",
					"ASFLAGS" : "-mcpu=arm7tdmi --fatal-warnings ",
					"LDFLAGS" : "-g --cref --allow-multiple-definition --gc-sections",
					"LDFLAGS" : "-L/usr/local/arm/lib/gcc/arm-elf/4.1.0 -lgcc -L/usr/local/arm/arm-elf/lib -lc",
					"COMPILER" : "arm-elf-gcc",
					"ASSEMBLER" : "arm-elf-as",
					"LINKER" : "arm-elf-ld",
					"MEMMAP" : {
						"TRUE" : { 
							"COMPILER" : "gcc",
							"LINKER" : {
								"gnu_ld" : { 
									"SCRIPT" : "script.ld"
								}
							},
							"ASSEMBLER" : "gnu_as",
							"MEMORY_PROTECTION" : "FALSE"
						}
					}
				}
			}
		}
	},
	
	"APPMODE" : {
		"std" : { 
		}
	},
	
	//TASK  objects represent OSEK tasks
	"TASK" : {
		"InitTask":{
			//priority of task (UINT32)
			"PRIORITY" : 31,
			
			//autostart defines whether task is activated during system startup or application mode (BOOLEAN)
			//if TRUE list all appliction modes "AUTOSTART" = TRUE { APPMODE : "..." /n APPMODE : "..." }
  			
  			"AUTOSTART" : {
				"TRUE" : [ "tmp"]
			},
			//maximum number of queued activation requests (UINT32)
			"ACTIVATION" : 1,
			//preemptibility of task (NONE,FULL)
			"SCHEDULE" : "FULL",
			//list of resources accessed by the task
			"RESOURCE" : ["SPIBusResource"]
			//list of events the extended task may react to
			//"EVENT" : ["CopterControlReceiveEvent"]
			//list of messages accessed by the task
			//"MESSAGE" : "
		},

		"SignalGatherInitiateTask":{
			"PRIORITY" : 24,
			"AUTOSTART" : "FALSE",
			"ACTIVATION" : 1,
			"SCHEDULE" : "FULL",
			"RESOURCE" : ["SPIBusResource"]
			//"EVENT" : ["CopterControlReceiveEvent"]
		},
		"SignalGatherWaitTask":{
			"PRIORITY" : 2,
			"AUTOSTART" : "FALSE",
			"ACTIVATION" : 1,
			"SCHEDULE" : "FULL",
			"RESOURCE" : ["SPIBusResource"]
			//"EVENT" : ["CopterControlReceiveEvent"]
		},
		"SignalGatherTimeoutTask":{
			"PRIORITY" : 23,
			"AUTOSTART" : "FALSE",
			"ACTIVATION" : 1,
			"SCHEDULE" : "FULL",
			"RESOURCE" : ["SPIBusResource"]
			//"EVENT" : ["CopterControlReceiveEvent"]
		},
		"SignalProcessingActuateTask":{
			"PRIORITY" : 22,
			"AUTOSTART" : "FALSE",
			"ACTIVATION" : 1,
			"SCHEDULE" : "FULL"
			//"EVENT" : ["CopterControlReceiveEvent"]
		},
		"SignalProcessingAttitudeTask":{
			"PRIORITY" : 21,
			"AUTOSTART" : "FALSE",
			"ACTIVATION" : 1,
			"SCHEDULE" : "FULL",
			"RESOURCE" : ["SPIBusResource"]
			//"EVENT" : ["CopterControlReceiveEvent"]
		},
		"FlightControlAttitudeTask":{
			"PRIORITY" : 9,
			"AUTOSTART" : "FALSE",
			"ACTIVATION" : 1,
			"SCHEDULE" : "FULL",
			"RESOURCE" : ["SPIBusResource"]
			//"EVENT" : ["CopterControlReceiveEvent"]
		},
		"FlightControlActuateTask":{
			"PRIORITY" : 9,
			"AUTOSTART" : "FALSE",
			"ACTIVATION" : 1,
			"SCHEDULE" : "FULL",
			"RESOURCE" : ["SPIBusResource"]
			//"EVENT" : ["CopterControlReceiveEvent"]
		},
		"ActuateTask":{
			"PRIORITY" : 9,
			"AUTOSTART" : "FALSE",
			"ACTIVATION" : 1,
			"SCHEDULE" : "FULL",
			"RESOURCE" : ["SPIBusResource"]
			//"EVENT" : ["CopterControlReceiveEvent"]
		},
		"MavlinkSendTask":{
			"PRIORITY" : 9,
			"AUTOSTART" : "FALSE",
			"ACTIVATION" : 1,
			"SCHEDULE" : "FULL",
			"RESOURCE" : ["SPIBusResource"]
			//"EVENT" : ["CopterControlReceiveEvent"]
        },
		"MavlinkRecvTask":{
			"PRIORITY" : 4,
			"AUTOSTART" : "FALSE",
			"ACTIVATION" : 1,
			"SCHEDULE" : "FULL",
			"RESOURCE" : ["SPIBusResource"]
			//"EVENT" : ["CopterControlReceiveEvent"]
		},
		"CopterControlWatchdogTask":{
			"PRIORITY" : 9,
			"AUTOSTART" : "FALSE",
			"ACTIVATION" : 1,
			"SCHEDULE" : "FULL",
			"RESOURCE" : ["SPIBusResource"]
			//"EVENT" : ["CopterControlReceiveEvent"]
		},
		"CopterControlTask":{
			"PRIORITY" : 9,
			"AUTOSTART" : "FALSE",
			"ACTIVATION" : 1,
			"SCHEDULE" : "FULL",
			"RESOURCE" : ["SPIBusResource"],
			"EVENT" : ["SignalGatherDigital2aTimeoutEvent"]
		},
		"EthernetTask":{
			"PRIORITY" : 9,
			"AUTOSTART" : "FALSE",
			"ACTIVATION" : 1,
			"SCHEDULE" : "FULL",
			"RESOURCE" : ["SPIBusResource"],
			"EVENT" : ["EthernetReceiveEvent"]
		}
		
	},
	
	//COUNTER serves as a base for the ALARM mechanism
	"COUNTER" : {
		"one_ms_counter" : {
			//maximum allowed counter value (UINT32)
			"MAXALLOWEDVALUE" : 50000,
			//number of ticks required to reach a counter specific unit (UINT32)
			"TICKSPERBASE" : 1,
			//minimum allowed number of counter ticks for a cycle (UINT32)
			"MINCYCLE" : 1
		},
		"C100" : {
			//maximum allowed counter value (UINT32)
			"MAXALLOWEDVALUE" : 1000,
			//number of ticks required to reach a counter specific unit (UINT32)
			"TICKSPERBASE" : 10,
			//minimum allowed number of counter ticks for a cycle (UINT32)
			"MINCYCLE" : 1
		}
	},
	
	//ALARM may be used to asynchronously inform or activate a specific task
	//it is possible to start alarms automatically at system start up depending on the application mode
	"ALARM" : {
		"SamplingAlarm" : {
		
			//counter which is referenced to this alarm
			"COUNTER" : "one_ms_counter", 
			
			//type of notification when alarm expires (ACTIVATETASK or SETEVENT or ALARMCALLBACK)
			//ACTIVATETASK defines the task to be activated when the alarm expires (TASK)
			//SETEVENT defines the task for which the event is to be set
			//the EVENT reference parameter defines the event to be set when the alarm expires (TASK,EVENT)
			//ALARMCALLBACK defines the name of the callback routine that is called when the alarm expires (ALARMCALLBACKNAME)
			"ACTION" : {
				"ACTIVATETASK" : { 
					"TASK" : "SignalGatherInitiateTask"
				}
			},
			
			//defines if an alarm is started automatically at system start up depending on the application mode (BOOLEAN)
			//if TRUE, ALARMTIME(UINT32), CYCLETIME(UINT32) and APPMODES(APPMODE []) are defines
			"AUTOSTART" : {
				"TRUE" : {
					"ALARMTIME" : 100,
					"CYCLETIME" : 500,
					"APPMODE" : ["tmp"]
				}
			}
		},
		"SignalGatherTimeoutAlarm" : {
		
			//counter which is referenced to this alarm
			"COUNTER" : "C100", 
			
			//type of notification when alarm expires (ACTIVATETASK or SETEVENT or ALARMCALLBACK)
			//ACTIVATETASK defines the task to be activated when the alarm expires (TASK)
			//SETEVENT defines the task for which the event is to be set
			//the EVENT reference parameter defines the event to be set when the alarm expires (TASK,EVENT)
			//ALARMCALLBACK defines the name of the callback routine that is called when the alarm expires (ALARMCALLBACKNAME)
			"ACTION" : {
				"ACTIVATETASK" : { 
					"TASK" : "SignalGatherInitiateTask"
				}
			},
			
			//defines if an alarm is started automatically at system start up depending on the application mode (BOOLEAN)
			//if TRUE, ALARMTIME(UINT32), CYCLETIME(UINT32) and APPMODES(APPMODE []) are defines
			"AUTOSTART" : {
				"TRUE" : {
					"ALARMTIME" : 100,
					"CYCLETIME" : 500,
					"APPMODE" : ["tmp"]
				}
			}
		},
		"ActuateAlarm" : {
		
			//counter which is referenced to this alarm
			"COUNTER" : "one_ms_counter", 
			
			//type of notification when alarm expires (ACTIVATETASK or SETEVENT or ALARMCALLBACK)
			//ACTIVATETASK defines the task to be activated when the alarm expires (TASK)
			//SETEVENT defines the task for which the event is to be set
			//the EVENT reference parameter defines the event to be set when the alarm expires (TASK,EVENT)
			//ALARMCALLBACK defines the name of the callback routine that is called when the alarm expires (ALARMCALLBACKNAME)
			"ACTION" : {
				"ACTIVATETASK" : { 
					"TASK" : "MavlinkSendTask"
				}
			},
			
			//defines if an alarm is started automatically at system start up depending on the application mode (BOOLEAN)
			//if TRUE, ALARMTIME(UINT32), CYCLETIME(UINT32) and APPMODES(APPMODE []) are defines
			"AUTOSTART" : {
				"TRUE" : {
					"ALARMTIME" : 100,
					"CYCLETIME" : 500,
					"APPMODE" : ["tmp"]
				}
			}
		},
		"CopterControlWatchdogAlarm" : {
		
			//counter which is referenced to this alarm
			"COUNTER" : "one_ms_counter", 
			
			//type of notification when alarm expires (ACTIVATETASK or SETEVENT or ALARMCALLBACK)
			//ACTIVATETASK defines the task to be activated when the alarm expires (TASK)
			//SETEVENT defines the task for which the event is to be set
			//the EVENT reference parameter defines the event to be set when the alarm expires (TASK,EVENT)
			//ALARMCALLBACK defines the name of the callback routine that is called when the alarm expires (ALARMCALLBACKNAME)
			"ACTION" : {
				"ACTIVATETASK" : { 
					"TASK" : "SignalGatherInitiateTask"
				}
			},
			
			//defines if an alarm is started automatically at system start up depending on the application mode (BOOLEAN)
			//if TRUE, ALARMTIME(UINT32), CYCLETIME(UINT32) and APPMODES(APPMODE []) are defines
			"AUTOSTART" : "FALSE"
		}
	}, 


	//EVENT object is represented by its mask, the name of the event is a synonym for its mask
	"EVENT" : {
		//"CopterControlReceiveEvent" : {
		//	//integer number MASK (UINT64 or AUTO)
		//	"MASK" : "AUTO"
		//},
        "MavMsgReceiveEvent" : {
			//integer number MASK (UINT64 or AUTO)
			"MASK" : "AUTO"
		},
        "EthernetReceiveEvent" : {
			//integer number MASK (UINT64 or AUTO)
			"MASK" : "AUTO"
		},
        "SignalGatherAnalogEvent" : {
			//integer number MASK (UINT64 or AUTO)
			"MASK" : "AUTO"
		},
        "SignalGatherDigital1Event" : {
			//integer number MASK (UINT64 or AUTO)
			"MASK" : "AUTO"
		},
        "SignalGatherDigital2bEvent" : {
			//integer number MASK (UINT64 or AUTO)
			"MASK" : "AUTO"
		},
        "SignalGatherDigital2aEvent" : {
			//integer number MASK (UINT64 or AUTO)
			"MASK" : "AUTO"
		},
        "SignalGatherDigital1TimeoutEvent" : {
			//integer number MASK (UINT64 or AUTO)
			"MASK" : "AUTO"
		},
        "SignalGatherDigital2aTimeoutEvent" : {
			//integer number MASK (UINT64 or AUTO)
			"MASK" : "AUTO"
		},
        "SignalGatherDigital2bTimeoutEvent" : {
			//integer number MASK (UINT64 or AUTO)
			"MASK" : "AUTO"
		},
        "FlightControlActuateEvent" : {
			//integer number MASK (UINT64 or AUTO)
			"MASK" : "AUTO"
		},
        "FlightControlAttitudeEvent" : {
			//integer number MASK (UINT64 or AUTO)
			"MASK" : "AUTO"
		}
	},
	
	
	
	//RESOURCE  object  is  used  to  coordinate  the  concurrent  access  by  tasks  and  ISRs  to  a shared resource
	//e.g. the scheduler, any program sequence, memory or any hardware area
	"RESOURCE" : {
		"SPIBusResource" : {
			//RESOURCEPROPERTY (STANDARD, LINKED, INTERNAL)
			//STANDARD, a normal RESOURCE that is not linked to another internal RESOURCE
			//LINKED, RESOURCE that is linked to another RESOURCE with property STANDARD or LINKED
			//the  resource  to  which  the  linking  shall  be  performed  is  defined  by  the  subattribute 
			//LINKEDRESOURCE  of  type  RESOURCE_TYPE
			//
			//"RESOURCEPROPERTY" : "STANDARD"
			//"RESOURCEPROPERTY" : {
			//	"LINKED" = "test"
			//}
			//INTERNAL, RESOURCE cannot accessed by the application
			"RESOURCEPROPERTY" : "STANDARD"
		}
	}
}
