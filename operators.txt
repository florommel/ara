
class A {
    virtual vector<pair<string, string>> get_attrs() = 0;
    virtual string get_name() = 0;
};

class B : public A {
    int a;
    int b

    virtual get_attrs() override {...}
};

operator<<(O_Stream& os, A bla) {
   os << bla.get_name << "(";
    for (auto& foo : bla.print()) {
        if foo.first == "type":
            color ...
        os << foo.first << foo.second
}

def __repr__(self):
    return self.deref.get_name()
  
def __str__(self):
    return repr(self)


def __eq__(self, other):
    return self.hash() == other.hash()

<
==


>
not < and not ==
<=
>=

__hash__():



A* bla = new B(lskdjf);

std::cout << *A << ...

std::cout << 1 << "bla" << (B) bla << endl;

(std::cout << 1)

std::cout.operator<<(int i)

operator<<(O_Stream, int i)
